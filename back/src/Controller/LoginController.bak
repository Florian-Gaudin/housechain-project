<?php
namespace App\Controller;

use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Routing\Annotation\Route;

class LoginController extends AbstractController
{
    private $userRepository;

    public function __construct(UserRepository $userRepository)
    {
        $this->userRepository = $userRepository;
    }

    #[Route('/api/login', name: 'login', methods: ['POST'])]
    public function login(Request $request, EntityManagerInterface $em, UserPasswordHasherInterface $passwordHasher): JsonResponse
    {
        $data = json_decode($request->getContent(), true);
        $username = $request->cookies->get('Username');

        $username = $data['username'] ?? null;
        $password = $data['password'] ?? null;

        if (!$username || !$password) {
            return new JsonResponse(['message' => 'Username and password are required.'], 400);
        }

        // Find the user by username
        $user = $this->userRepository->findOneBy(['mail' => $username]);

        if (!$user) {
            return new JsonResponse(['message' => 'User not found.'], 404);
        }

        // Check if the password matches
        if (password_verify($password, $user->getPassword())) {

                $hashedPassword = $passwordHasher->hashPassword($user, $password);
                $user->setPassword($hashedPassword);
                $em->persist($user);
                $em->flush();
            }
            return new JsonResponse(['message' => "Connecté avec succès."], 200);
        } else {
            return new JsonResponse(['message' => 'Incorrect username or password.'], 401);
        }
    }

    // #[Route('/api/logout', name: 'logout', methods: ['POST'])]
    // public function logout(Request $request, EntityManagerInterface $em, UserPasswordHasherInterface $passwordHasher): JsonResponse
    // {
        
    // }
}